#!/usr/bin/env python3
"""
Demonstraci√≥n simple de componentes Kahneman implementados
Muestra detecci√≥n de sesgos y correcci√≥n regresiva sin dependencias complejas
"""

import sys
import os
from typing import Dict, List

# Add core to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))

def demo_bias_detection():
    """Demonstraci√≥n de detecci√≥n autom√°tica de sesgos Kahneman"""
    print("üß† DEMO: DETECCI√ìN AUTOM√ÅTICA DE SESGOS KAHNEMAN")
    print("=" * 60)
    
    from kahneman_bias_detector import KahnemanBiasDetector, PredictionInput
    
    detector = KahnemanBiasDetector()
    
    # Casos de test con sesgos claros
    test_cases = [
        {
            "name": "Evidencia con Sesgo de Disponibilidad",
            "text": "Recuerdo varios casos recientes donde reformas similares funcionaron muy bien",
            "expected_biases": ["availability_heuristic"]
        },
        {
            "name": "Evidencia con Representatividad",
            "text": "Este pa√≠s es exactamente como Estonia donde la reforma fue 100% exitosa",
            "expected_biases": ["representativeness_heuristic"]  
        },
        {
            "name": "Evidencia con Exceso de Confianza",
            "text": "Estoy completamente seguro que esto funcionar√° al 95% sin dudas",
            "expected_biases": ["overconfidence"]
        },
        {
            "name": "Evidencia con Anclaje",
            "text": "La reforma anterior tuvo 85% de √©xito, esta ser√° similar",
            "expected_biases": ["anchoring"]
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}: {test_case['name']}")
        print(f"   Texto: {test_case['text']}")
        
        # Crear input de predicci√≥n
        pred_input = PredictionInput(
            prediction_value=0.8,
            confidence_interval=(0.7, 0.9),
            evidence_description=test_case['text'],
            methodology_used="expert_analysis"
        )
        
        # Detectar sesgos
        detected_biases = detector.detect_all_biases(pred_input)
        
        print(f"   üéØ Sesgos Detectados ({len(detected_biases)}):")
        for bias in detected_biases:
            print(f"      ‚Ä¢ {bias.bias_type.value}: {bias.severity:.2f} (confianza: {bias.confidence:.2f})")
            print(f"        Descripci√≥n: {bias.description[:80]}...")
        
        # Verificar si detect√≥ los sesgos esperados
        detected_types = [bias.bias_type.value for bias in detected_biases]
        expected_found = any(expected in detected_types for expected in test_case['expected_biases'])
        status = "‚úÖ" if expected_found else "‚ö†Ô∏è"
        print(f"   {status} Detecci√≥n esperada: {'S√ç' if expected_found else 'PARCIAL'}")
    
    print(f"\nüìä RESUMEN DETECCI√ìN DE SESGOS:")
    print("   ‚Ä¢ Illusion of validity: Detecta coherencia artificial")  
    print("   ‚Ä¢ Representativeness: Identifica comparaciones superficiales")
    print("   ‚Ä¢ Availability bias: Encuentra ejemplos memorables recientes")
    print("   ‚Ä¢ Anchoring: Localiza valores de referencia inadecuados")
    print("   ‚Ä¢ Overconfidence: Mide intervalos de confianza demasiado estrechos")
    print("   ‚Ä¢ Narrative fallacy: Identifica historias causales simplistas")

def demo_regressive_correction():
    """Demonstraci√≥n de correcci√≥n regresiva Kahneman"""
    print("\nüéØ DEMO: CORRECCI√ìN REGRESIVA DE PREDICCIONES")
    print("=" * 60)
    
    from kahneman_prediction_correction import (
        KahnemanPredictionCorrector, BaseRateData, IntuitiveEvidence, 
        CorrelationAssessment
    )
    
    corrector = KahnemanPredictionCorrector()
    
    # Caso: Reforma judicial en Argentina
    print("üìã CASO: Reforma Judicial Argentina")
    
    # Base rate hist√≥rica (realista)
    base_rate = BaseRateData(
        outcome_type="Judicial Reform Argentina",
        historical_base_rate=0.45,  # 45% √©xito hist√≥rico
        sample_size=22,
        confidence_in_base_rate=0.75,
        time_period="1990-2023",
        geographic_scope="Argentina"
    )
    print(f"   üìä Base Rate Hist√≥rica: {base_rate.historical_base_rate:.1%} (n={base_rate.sample_size})")
    
    # Evidencia intuitiva (optimista)
    evidence = IntuitiveEvidence(
        evidence_type="Expert Analysis + Tech Innovation",
        evidence_strength=0.80,  # Evidencia fuerte
        evidence_quality=0.70,   # Calidad buena pero no perfecta
        coherence_score=0.85,    # Historia coherente
        availability_bias=0.30,  # Algo de sesgo disponibilidad  
        representativeness_bias=0.25  # Algo de representatividad
    )
    print(f"   üîç Evidencia Strength: {evidence.evidence_strength:.2f}")
    print(f"   üéØ Coherencia: {evidence.coherence_score:.2f}")
    print(f"   ‚ö†Ô∏è Sesgos detectados: Disponibilidad={evidence.availability_bias:.2f}, Representatividad={evidence.representativeness_bias:.2f}")
    
    # Correlaci√≥n (moderada)
    correlation = CorrelationAssessment(
        evidence_outcome_correlation=0.65,  # Correlaci√≥n moderada-alta
        correlation_confidence=0.70,
        historical_validation=None,
        expert_consensus=0.75
    )
    print(f"   üîó Correlaci√≥n Evidencia-Outcome: {correlation.evidence_outcome_correlation:.2f}")
    
    # Predicci√≥n intuitiva inicial (optimista)
    intuitive_prediction = 0.85  # 85% predicci√≥n inicial optimista
    print(f"   üé® Predicci√≥n Intuitiva Original: {intuitive_prediction:.1%}")
    
    # Aplicar correcci√≥n regresiva
    correction_result = corrector.correct_prediction(
        base_rate, evidence, correlation, intuitive_prediction
    )
    
    print(f"\nüéØ RESULTADOS CORRECCI√ìN KAHNEMAN:")
    print(f"   Original: {correction_result['original_intuitive_prediction']:.1%}")
    print(f"   Corregida: {correction_result['corrected_prediction']:.1%}")
    print(f"   Ajuste: {correction_result['original_intuitive_prediction'] - correction_result['corrected_prediction']:.1%}")
    print(f"   Correcci√≥n Aplicada: {'S√≠' if correction_result['correction_applied'] else 'No'}")
    print(f"   Intervalo Confianza: [{correction_result['confidence_interval'][0]:.1%}, {correction_result['confidence_interval'][1]:.1%}]")
    
    if correction_result['kahneman_warnings']:
        print(f"   ‚ö†Ô∏è Warnings Kahneman:")
        for warning in correction_result['kahneman_warnings'][:3]:
            print(f"      ‚Ä¢ {warning}")
    
    print(f"\nüìà INTERPRETACI√ìN:")
    print(f"   ‚Ä¢ Predicci√≥n original sesgada hacia optimismo")
    print(f"   ‚Ä¢ Correcci√≥n regresiva reduce overconfidence") 
    print(f"   ‚Ä¢ Base rate hist√≥rica modera expectativas")
    print(f"   ‚Ä¢ Intervalos de confianza m√°s honestos y amplios")

def demo_argentina_analysis_simulation():
    """Simulaci√≥n de an√°lisis mejorado para Argentina"""
    print("\nüá¶üá∑ DEMO: SIMULACI√ìN AN√ÅLISIS ARGENTINA KAHNEMAN-ENHANCED")
    print("=" * 70)
    
    from kahneman_bias_detector import KahnemanBiasDetector, PredictionInput
    from kahneman_prediction_correction import (
        KahnemanPredictionCorrector, BaseRateData, IntuitiveEvidence, 
        CorrelationAssessment
    )
    
    detector = KahnemanBiasDetector()
    corrector = KahnemanPredictionCorrector()
    
    # Escenario: Reforma integral del sistema judicial
    scenario = {
        "titulo": "Reforma Integral Sistema Judicial Argentino 2024",
        "descripcion": """
        Propuesta de digitalizaci√≥n completa del Poder Judicial:
        1. Expedientes 100% digitales en 18 meses
        2. IA para asignaci√≥n autom√°tica de casos
        3. Tribunales especializados anti-corrupci√≥n 
        4. Sistema de m√©tricas de performance judicial
        5. Reforma Consejo de la Magistratura
        """,
        "evidencia_inicial": """
        Estonia implement√≥ sistema similar con 95% de √©xito.
        Expertos argentinos muy optimistas sobre la propuesta.
        La tecnolog√≠a ya existe y est√° probada mundialmente.
        Ciudadan√≠a apoya fuertemente modernizaci√≥n judicial.
        Gobierno tiene mayor√≠a parlamentaria para aprobar reformas.
        """
    }
    
    print(f"üìã ESCENARIO: {scenario['titulo']}")
    
    # PASO 1: An√°lisis de sesgos en evidencia
    print(f"\nüîç PASO 1: DETECCI√ìN DE SESGOS EN EVIDENCIA")
    pred_input = PredictionInput(
        prediction_value=0.88,
        confidence_interval=(0.80, 0.95),
        evidence_description=scenario['evidencia_inicial'],
        methodology_used="expert_analysis_argentina"
    )
    
    detected_biases = detector.detect_all_biases(pred_input)
    print(f"   üö® Sesgos detectados: {len(detected_biases)}")
    
    bias_impact = 0.0
    for bias in detected_biases[:3]:  # Top 3 sesgos
        print(f"   ‚Ä¢ {bias.bias_type.value}: Severidad {bias.severity:.2f}")
        bias_impact += bias.severity
    
    # PASO 2: Predicci√≥n intuitiva inicial (sesgada)
    print(f"\nüé® PASO 2: PREDICCI√ìN INTUITIVA INICIAL")
    intuitive_success_prob = 0.88  # 88% - muy optimista
    intuitive_ci = (0.80, 0.95)   # Intervalo muy estrecho (overconfidence)
    print(f"   √âxito predicho: {intuitive_success_prob:.1%}")
    print(f"   Intervalo confianza: [{intuitive_ci[0]:.1%}, {intuitive_ci[1]:.1%}]")
    print(f"   ‚ö†Ô∏è Amplitud intervalo: {intuitive_ci[1] - intuitive_ci[0]:.1%} (muy estrecho)")
    
    # PASO 3: Aplicar correcci√≥n regresiva
    print(f"\nüéØ PASO 3: CORRECCI√ìN REGRESIVA KAHNEMAN")
    
    # Base rate realista para reformas judiciales en Argentina
    argentina_base_rate = BaseRateData(
        outcome_type="Judicial Tech Reform Argentina", 
        historical_base_rate=0.40,  # 40% √©xito hist√≥rico
        sample_size=15,
        confidence_in_base_rate=0.65,
        time_period="1983-2023",
        geographic_scope="Argentina"
    )
    
    # Evidencia ajustada por sesgos
    evidence_adjusted = IntuitiveEvidence(
        evidence_type="Mixed Evidence with Biases",
        evidence_strength=0.70,
        evidence_quality=0.60,  # Reducida por sesgos
        coherence_score=0.80,
        availability_bias=min(0.5, bias_impact * 0.3),
        representativeness_bias=min(0.4, bias_impact * 0.25)
    )
    
    # Correlaci√≥n moderada (Estonia ‚â† Argentina)
    correlation = CorrelationAssessment(
        evidence_outcome_correlation=0.50,  # Moderada, no alta
        correlation_confidence=0.60,
        historical_validation=None,
        expert_consensus=0.65
    )
    
    # Aplicar correcci√≥n
    correction_result = corrector.correct_prediction(
        argentina_base_rate, evidence_adjusted, correlation, intuitive_success_prob
    )
    
    print(f"   Base Rate Argentina: {argentina_base_rate.historical_base_rate:.1%}")
    print(f"   Correlaci√≥n estimada: {correlation.evidence_outcome_correlation:.2f}")
    print(f"   Metodolog√≠a: {correction_result['methodology']}")
    
    # PASO 4: Resultados finales
    print(f"\nüìä PASO 4: COMPARACI√ìN FINAL")
    print(f"   üé® ORIGINAL (sesgada):")
    print(f"      Probabilidad √©xito: {intuitive_success_prob:.1%}")
    print(f"      Intervalo confianza: [{intuitive_ci[0]:.1%}, {intuitive_ci[1]:.1%}]")
    print(f"      Amplitud intervalo: {intuitive_ci[1] - intuitive_ci[0]:.1%}")
    
    print(f"   üéØ KAHNEMAN-CORRECTED:")
    corrected_prob = correction_result['corrected_prediction']
    corrected_ci = correction_result['confidence_interval']
    print(f"      Probabilidad √©xito: {corrected_prob:.1%}")
    print(f"      Intervalo confianza: [{corrected_ci[0]:.1%}, {corrected_ci[1]:.1%}]")
    print(f"      Amplitud intervalo: {corrected_ci[1] - corrected_ci[0]:.1%}")
    
    # Calcular mejoras
    adjustment = intuitive_success_prob - corrected_prob
    ci_improvement = (corrected_ci[1] - corrected_ci[0]) - (intuitive_ci[1] - intuitive_ci[0])
    
    print(f"\n‚ú® MEJORAS APLICADAS:")
    print(f"   üìâ Reducci√≥n optimismo: {adjustment:.1%}")
    print(f"   üìè Intervalos m√°s honestos: +{ci_improvement:.1%} amplitud")
    print(f"   üß† Sesgos corregidos: {len(detected_biases)} tipos detectados")
    print(f"   üìä Base rate integrada: {argentina_base_rate.historical_base_rate:.1%} hist√≥rico")
    
    return {
        'original_prediction': intuitive_success_prob,
        'corrected_prediction': corrected_prob,
        'biases_detected': len(detected_biases),
        'adjustment_made': adjustment
    }

def main():
    """Ejecutar todas las demostraciones"""
    print("üöÄ DEMOSTRACI√ìN COMPONENTES KAHNEMAN IMPLEMENTADOS")
    print("=" * 80)
    
    # Demo 1: Detecci√≥n de sesgos
    demo_bias_detection()
    
    # Demo 2: Correcci√≥n regresiva  
    demo_regressive_correction()
    
    # Demo 3: An√°lisis completo Argentina
    results = demo_argentina_analysis_simulation()
    
    # Resumen final
    print(f"\nüéâ RESUMEN FINAL - KAHNEMAN ENHANCEMENTS OPERATIVOS")
    print("=" * 80)
    print("‚úÖ IMPLEMENTACIONES COMPLETADAS:")
    print("   1. üß† Detecci√≥n autom√°tica 6 tipos sesgos cognitivos")
    print("   2. üéØ Correcci√≥n regresiva con base rates hist√≥ricas") 
    print("   3. üìä Intervalos de confianza ajustados por calidad evidencia")
    print("   4. ‚ö†Ô∏è Sistema alertas anti-overconfidence")
    print("   5. üîß Protocolo Meehl: f√≥rmulas estad√≠sticas > juicios cl√≠nicos")
    
    print(f"\nüìà RESULTADOS ARGENTINA TEST:")
    print(f"   ‚Ä¢ Predicci√≥n original: {results['original_prediction']:.1%}")
    print(f"   ‚Ä¢ Predicci√≥n corregida: {results['corrected_prediction']:.1%}")
    print(f"   ‚Ä¢ Sesgos detectados: {results['biases_detected']}")
    print(f"   ‚Ä¢ Ajuste aplicado: {results['adjustment_made']:.1%}")
    
    print(f"\nüí° VALOR AGREGADO KAHNEMAN:")
    print("   ‚Ä¢ Protecci√≥n contra overconfidence sistem√°tico")
    print("   ‚Ä¢ Base rates hist√≥ricas anclan predicciones en realidad")
    print("   ‚Ä¢ Detecci√≥n autom√°tica elimina sesgos inconscientes") 
    print("   ‚Ä¢ Intervalos honestos mejoran toma de decisiones")
    print("   ‚Ä¢ Sistema 2 thinking aplicado autom√°ticamente")

if __name__ == "__main__":
    main()